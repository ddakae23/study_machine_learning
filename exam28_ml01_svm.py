# -*- coding: utf-8 -*-
"""exam28_ml01_svm.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19eOFT-lXfdUmvbYLGAcEtDVPvweyY-kS
"""

import numpy as np
import pandas as pd
from sklearn.datasets import load_iris
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split

iris_dataset = load_iris()
iris = pd.DataFrame(iris_dataset.data, columns=iris_dataset.feature_names)
labels = iris_dataset.target_names
iris.info()
print(iris.head())

scaler = StandardScaler()
iris = scaler.fit_transform(iris)

features = pd.DataFrame(iris, columns=['sl', 'sw', 'pl', 'pw'])
print(features.shape)
print(np.ndim(features))

label = iris_dataset.target
label

x_train, x_test, y_train, y_test = train_test_split(features, label, test_size=0.2)
print(x_train.shape, x_test.shape)
print(y_train.shape, y_test.shape)

from sklearn import svm
iris_svm = svm.SVC(C=1.0, class_weight='balanced', kernel='linear', gamma='scale')
iris_svm.fit(x_train, y_train)

iris_svm.score(x_test, y_test)

iris_svm.score(x_train, y_train)

from sklearn.metrics import classification_report, confusion_matrix
pd.DataFrame(confusion_matrix(y_test, iris_svm.predict(x_test)),
             columns=['pred setosa', 'pred versicolore', 'pred virginica'],
             index=['actual setosa', 'actual versicolore', 'pred virginica'])

print(classification_report(y_test, iris_svm.predict(x_test)))

from sklearn.metrics.pairwise import kernel_metrics
from sklearn.model_selection import StratifiedShuffleSplit, GridSearchCV
kernels = ['linear', 'poly', 'rbf', 'sigmoid']
params = dict(kernel=kernels)
cv = StratifiedShuffleSplit(n_splits=5, test_size=0.2, random_state=2958)

iris_svm = svm.SVC(C=1.0, random_state=2958, class_weight='balanced', degree=1)
kernel_type = GridSearchCV(iris_svm, params, cv=cv)
kernel_type.fit(x_train, y_train)
scores = kernel_type.cv_results_['mean_test_score']

print(params)

for score, kernel in zip(scores, kernels):
  print(f'{kernel}{score:.3f}')

for i in range(100):
  x_train, x_test, y_train, y_test = train_test_split(features, label, test_size=0.2, random_state=i)
  iris_svm = svm.SVC(C=1.4, kernel='poly', degree=1, class_weight='balanced')
  iris_svm.fit(x_train, y_train)
  train_score = iris_svm.score(x_train, y_train)
  test_score = iris_svm.score(x_test, y_test)
  if test_score >= train_score:
    print('Test: {} Train : {} Random state : {}'.format(test_score, train_score, i))

x_train, x_test, y_train, y_test = train_test_split(features, label, test_size=0.2, random_state=9)
iris_svm = svm.SVC(C=1.4, kernel='poly', degree=1, class_weight='balanced')
iris_svm.fit(x_train, y_train)

iris_svm.score(x_train, y_train)

iris_svm.score(x_test, y_test)

pd.DataFrame(confusion_matrix(y_test, iris_svm.predict(x_test)),
             columns=['pred setosa', 'pred versicolore', 'pred virginica'],
             index=['actual setosa', 'actual versicolore', 'pred virginica'])

print(classification_report(y_test, iris_svm.predict(x_test)))