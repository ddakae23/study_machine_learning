# -*- coding: utf-8 -*-
"""exam15_multi_variation_predict_daily_stock_price.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wnT8vosTjc9k9oum7daVMu5aj35La1SZ
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import *
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split
from tensorflow.keras.callbacks import EarlyStopping

raw_data = pd.read_csv('./datasets/samsung231009.csv')
print(raw_data.head())
raw_data.info()

raw_data['Date'] = pd.to_datetime(raw_data['Date'])
raw_data.info()
raw_data.set_index('Date', inplace=True)
print(raw_data.head())

data = raw_data['2020-10-09':'2023-10-09']
print(data.tail())
print(data.info())
print(data.shape)

minmaxscaler = MinMaxScaler()
scaled_data = minmaxscaler.fit_transform(data)
print(scaled_data[:5])
print(scaled_data.shape)

sequence_X = []
sequence_Y = []

for i in range(len(scaled_data)-30):
    x = scaled_data[i:i+30]
    y = scaled_data[i+30][3]
    sequence_X.append(x)
    sequence_Y.append(y)

sequence_X = np.array(sequence_X)
sequence_Y = np.array(sequence_Y)
print(sequence_X[0])
print(sequence_Y[0])
print(sequence_X.shape)
print(sequence_Y.shape)

X_train, X_test, Y_train, Y_test = train_test_split(
    sequence_X, sequence_Y, test_size = 0.2, random_state = 77)
print(X_train.shape, Y_train.shape)
print(X_test.shape, Y_test.shape)

model = Sequential()
model.add(GRU(50,input_shape=(X_train.shape[1],X_train.shape[2]),
              return_sequences = True, activation = 'tanh'))
model.add(Flatten())
model.add(Dense(1))
model.compile(loss='mse', optimizer='adam')
model.summary()

fit_hist = model.fit(X_train, Y_train, epochs=350,
                     validation_data=(X_test, Y_test),shuffle=False)

plt.plot(fit_hist.history['loss'])
plt.plot(fit_hist.history['val_loss'])
plt.show()

predict = model.predict(X_test)

plt.plot(Y_test, label='actual')
plt.plot(predict, label='predict')
plt.legend()
plt.show()

last_30_data = scaled_data[-30:].reshape(1,30,6)
today_close = model.predict(last_30_data)
print(today_close)

temp = np.array([0,0,0,today_close[0][0],0,0]).reshape(1,6)
today_close_won = minmaxscaler.inverse_transform(temp)
print(today_close_won[0][3])

