# -*- coding: utf-8 -*-
"""exam31_ml04_decision_tree.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1c1rvF1l1vkeLDWIPMfztit3JyUXVhh3U
"""

import numpy as np
import pandas as pd
from sklearn.datasets import load_iris
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
from sklearn.metrics import *

iris_dataset = load_iris()
iris = pd.DataFrame(iris_dataset.data, columns=iris_dataset.feature_names)
labels = iris_dataset.target_names
iris.info()
iris.head()

label = iris_dataset.target
label

x_train, x_test, y_train, y_test = train_test_split(iris, label, test_size=0.2, random_state=1)
print(x_train.shape, x_test.shape)
print(y_train.shape, y_test.shape)

from sklearn.tree import DecisionTreeClassifier
iris_tree = DecisionTreeClassifier(criterion='entropy')
iris_tree.fit(x_train, y_train)

iris_tree.score(x_train, y_train)

iris_tree.score(x_test, y_test)

from sklearn import tree
plt.figure(figsize=(15, 15))
tree.plot_tree(iris_tree, filled=True, rounded=True,
               class_names=['setosa', 'versicolore', 'virginica'], feature_names=iris.columns)

path = iris_tree.cost_complexity_pruning_path(x_train, y_train)
ccp_alphas, impurities = path.ccp_alphas, path.impurities
ccp_alphas

iris_trees = []
for ccp_alpha in ccp_alphas:
    iris_tree = DecisionTreeClassifier(criterion='entropy', ccp_alpha=ccp_alpha)
    iris_tree.fit(x_train, y_train)
    iris_trees.append(iris_tree)

train_score = [iris_tree.score(x_train, y_train) for iris_tree in iris_trees]
test_score = [iris_tree.score(x_test, y_test) for iris_tree in iris_trees]

fig, ax = plt.subplots()
ax.set_xlabel('alpha')
ax.set_ylabel('accuracy')
ax.set_title('Accuracy vs. alpha for training and testing sets')
ax.plot(ccp_alphas, train_score, marker='.', label='train', drawstyle='steps-post')
ax.plot(ccp_alphas, test_score, marker='.', label='test', drawstyle='steps-post')
ax.legend()
plt.show()

ccp_alphas

iris_tree = DecisionTreeClassifier(criterion='entropy', ccp_alpha=0.45)
iris_tree.fit(x_train, y_train)
print('Train :', iris_tree.score(x_train, y_train))
print('Test :', iris_tree.score(x_test, y_test))

plt.figure(figsize=(7, 7))
tree.plot_tree(iris_tree, filled=True, rounded=True,
               class_names=['setosa', 'versicolore', 'virginica'], feature_names=iris.columns)