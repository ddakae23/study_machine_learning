# -*- coding: utf-8 -*-
"""exam32_ml05_random_forest.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QOVROiA3xLZbCCyxmpjyCSU93CEOrmoQ
"""

import numpy as np
import pandas as pd
from sklearn.datasets import load_iris
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
from sklearn.metrics import *

iris_dataset = load_iris()
iris = pd.DataFrame(iris_dataset.data, columns=iris_dataset.feature_names)
labels = iris_dataset.target_names
iris.info()
iris.head()

label = iris_dataset.target
label

x_train, x_test, y_train, y_test = train_test_split(iris, label, test_size=0.2, random_state=1)
print(x_train.shape, x_test.shape)
print(y_train.shape, y_test.shape)

from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import BaggingClassifier

for i in range(1, 100):
    x_train, x_test, y_train, y_test = train_test_split(iris, label, test_size=0.2, random_state=i)
    iris_tree = DecisionTreeClassifier(criterion='entropy', ccp_alpha=0.02)
    iris_forest = BaggingClassifier(iris_tree, n_estimators=200, max_samples=0.8, random_state=888)
    iris_forest.fit(x_train, y_train)
    train_score = iris_forest.score(x_train, y_train)
    test_score = iris_forest.score(x_test, y_test)
    if test_score >= train_score:
        print(test_score, train_score, i)

x_train, x_test, y_train, y_test = train_test_split(iris, label, test_size=0.2, random_state=3)
iris_tree = DecisionTreeClassifier(criterion='entropy', ccp_alpha=0.02)
iris_forest = BaggingClassifier(iris_tree, n_estimators=200, max_samples=0.8, random_state=888)
iris_forest.fit(x_train, y_train)
train_score = iris_forest.score(x_train, y_train)
test_score = iris_forest.score(x_test, y_test)
print(test_score, train_score)

from sklearn import tree
plt.figure(figsize=(8, 8))
tree.plot_tree(iris_forest.estimators_[4], filled=True, rounded=True,
               class_names=['setosa', 'versicolore', 'virginica'], feature_names=iris.columns)

for i in range(200):
    print(tree.export_text(iris_forest.estimators_[i]))