# -*- coding: utf-8 -*-
"""exam26_matplotlib_visualization02.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1p_l5fFE8xdoNv35eG8vCsj44lG66w5q2
"""

import numpy as np
import matplotlib as mpl
import matplotlib.pyplot as plt
import seaborn as sns
plt.rcParams['figure.dpi'] = 60

point = 100
x = list(range(-50, 50))
x = list(map(lambda x: x / 10, x))
y = list(map(np.sin, x))

fig = plt.figure(figsize=(5, 5))
ax = fig.add_axes([0, 0, 1, 1])
ax.plot(x, y,'-', markersize=20,markerfacecolor='b', color='y', linewidth=2)
plt.axhline(color='k', linewidth=1)
plt.axvline(color='black')
plt.show()

point = 100
x = np.linspace(-5, 5, 100)
y = 3 * x * x + 1

fig = plt.figure(figsize=(5, 5))
ax = fig.add_axes([0, 0, 1, 1])
ax.plot(x, y,'-', markersize=20,markerfacecolor='b', color='y', linewidth=2)
plt.axhline(color='k', linewidth=1)
plt.axvline(color='black')
plt.show()

x = [1, 2, 3, 4, 5]
y = []
for i in x:
  y.append(i/10)
print(y)

def div10(x):
  return x/10

y = map(div10, x)
print(list(y))

x_arr = np.array(x)
y = x_arr/10
print(y)

import math
def sigmoid(x):
  sig = 1 / (1 + math.exp(-x))
  return sig

point = 100
x = np.linspace(-10, 10, point)
y = list(map(sigmoid, x))

fig = plt.figure(figsize=(8, 5))
ax = fig.add_axes([0, 0, 1, 1])

ax.plot(x, y, color='r', linewidth=2)
plt.axhline(color='k', linewidth=1)
plt.axvline(c='k', linewidth=1)
ax.set_title('sigmoid')
plt.show()

labels = 'Frogs', 'Hogs', 'Hogs', 'Logs'
sizes = [15, 30, 45, 10]
explode = (0, 0.1, 0, 0)

fig1, ax1 = plt.subplots(figsize = (7, 7))   # x축 또는 y축의 사이즈 중 작은 값에 맞춰서 그려짐.
wedges, texts, autotexts = ax1.pie(sizes, labels = labels, explode = explode, shadow=True, autopct = '%d%%', startangle = -90)
wedges[1].set(hatch='///', alpha = 0.9)
wedges[1].set_radius(1.1)
# wedges[3].set_theta1(90)
# 시계 반대방향 순서로 sizes를 나타냄.비율을 알아서 잡아줌. 시작점은 3시를 기준선으로 함.
# labels의 갯수를 맞춰야함.
# explode도 갯수를 맞춰야함. 강조하기 위해 띄어기를 함.(적당히 띄어야함. 권장 = 0.1)
# autopct 각 크기의 비율을 표시.
# startangle 시각하는 각도를 설정.
plt.show()

size = 0.3
vals1 = [40, 35, 25]
vals2 = [11, 29, 12, 23, 12, 13]

cmap = plt.get_cmap('tab20c')
outer_colors = cmap([0, 4, 12])
inner_colors = cmap([1, 2, 5, 6, 13, 14])

fig = plt.figure(figsize = (5, 5))
ax = fig.add_axes([0, 0, 1, 1])

ax.pie(vals1, radius = 1, colors=outer_colors, labels=['male', 'female', 'pet'], pctdistance = 0.83,
       autopct='%1.1f%%', wedgeprops={'width':size, 'edgecolor':'w', 'linewidth':5},
       startangle = 90, counterclock=False, rotatelabels=False)
ax.pie(vals2, radius = 1-size, colors=inner_colors, pctdistance = 0.78,
       autopct='%1.1f%%', wedgeprops={'width':size, 'edgecolor':'w', 'linewidth':5},
       textprops={'color':'w'},
       startangle = 90, counterclock=False, rotatelabels=False)

plt.show()

# cmap = 'tab20c'
cmap = 'turbo'
fig = plt.figure(figsize=(8, 5))
ax = fig.add_axes([0, 0, 1, 1], frameon = False, xticks=[], yticks=[])
z = np.linspace(0, 1, 512).reshape(1, 512)
plt.imshow(z, extent=[0, 30, 0, 5], cmap=plt.get_cmap(cmap))
plt.show()

plt.colormaps()

cmaps = {}

gradient = np.linspace(0, 1, 256)
gradient = np.vstack((gradient, gradient))


def plot_color_gradients(category, cmap_list):
    # Create figure and adjust figure height to number of colormaps
    nrows = len(cmap_list)
    figh = 0.35 + 0.15 + (nrows + (nrows - 1) * 0.1) * 0.22
    fig, axs = plt.subplots(nrows=nrows + 1, figsize=(6.4, figh))
    fig.subplots_adjust(top=1 - 0.35 / figh, bottom=0.15 / figh,
                        left=0.2, right=0.99)
    axs[0].set_title(f'{category} colormaps', fontsize=14)

    for ax, name in zip(axs, cmap_list):
        ax.imshow(gradient, aspect='auto', cmap=mpl.colormaps[name])
        ax.text(-0.01, 0.5, name, va='center', ha='right', fontsize=10,
                transform=ax.transAxes)

    # Turn off *all* ticks & spines, not just the ones with colormaps.
    for ax in axs:
        ax.set_axis_off()

    # Save colormap list for later.
    cmaps[category] = cmap_list

plot_color_gradients('Perceptually Uniform Sequential',
                     ['viridis', 'plasma', 'inferno', 'magma', 'cividis'])

# Sequential
plot_color_gradients('Sequential',
                     ['Greys', 'Purples', 'Blues', 'Greens', 'Oranges', 'Reds',
                      'YlOrBr', 'YlOrRd', 'OrRd', 'PuRd', 'RdPu', 'BuPu',
                      'GnBu', 'PuBu', 'YlGnBu', 'PuBuGn', 'BuGn', 'YlGn'])

# Sequential2
plot_color_gradients('Sequential (2)',
                     ['binary', 'gist_yarg', 'gist_gray', 'gray', 'bone',
                      'pink', 'spring', 'summer', 'autumn', 'winter', 'cool',
                      'Wistia', 'hot', 'afmhot', 'gist_heat', 'copper'])

# Diverging
plot_color_gradients('Diverging',
                     ['PiYG', 'PRGn', 'BrBG', 'PuOr', 'RdGy', 'RdBu', 'RdYlBu',
                      'RdYlGn', 'Spectral', 'coolwarm', 'bwr', 'seismic'])

# Cyclic
plot_color_gradients('Cyclic', ['twilight', 'twilight_shifted', 'hsv'])

# Qualitative
plot_color_gradients('Qualitative',
                     ['Pastel1', 'Pastel2', 'Paired', 'Accent', 'Dark2',
                      'Set1', 'Set2', 'Set3', 'tab10', 'tab20', 'tab20b',
                      'tab20c'])

# Miscellaneous
plot_color_gradients('Miscellaneous',
                     ['flag', 'prism', 'ocean', 'gist_earth', 'terrain',
                      'gist_stern', 'gnuplot', 'gnuplot2', 'CMRmap',
                      'cubehelix', 'brg', 'gist_rainbow', 'rainbow', 'jet',
                      'turbo', 'nipy_spectral', 'gist_ncar'])

plt.show()

N = 10
X = list(range(10))
Y1 = np.random.uniform(1, 7, N)
Y2 = np.random.uniform(1, 7, N)

fig = plt.figure(figsize=(8, 5))
ax = fig.add_axes([0, 0, 1, 1])

ax.bar(X, Y1, 1, facecolor='#9999ff', edgecolor='w')
ax.bar(X, -Y2, 1, facecolor='#4444ff', edgecolor='w')

ax.set_title('Bar plot', fontdict={'fontsize':30})
plt.show()

N = 5
menMeans = (20, 35, 30, 35, -27)
womenMeans = (25, 32, 34, 20, -25)
menStd = (2, 3, 4, 1, 2)
womenStd = (3, 5, 2, 3, 3)
ind = np.arange(N)
width = 0.35

fig = plt.figure(figsize=(8, 5))
ax = fig.add_axes([0, 0, 1, 1])
p1 = ax.bar(ind, menMeans, width, yerr=menStd, label='Men')
p2 = ax.bar(ind, womenMeans, width, yerr=womenStd, label='Women', bottom=menMeans)

ax.axhline(0, color = 'gray', linewidth=0.8)
ax.set_ylabel('Scores')
ax.set_title('Scores by group and gender')
ax.legend()   # 범례.

plt.show()

width = 0.35

fig = plt.figure(figsize=(8, 5))
ax = fig.add_axes([0, 0, 1, 1])
p1 = ax.bar(ind-width/2, menMeans, width, yerr=menStd, label='Men')
p2 = ax.bar(ind+width/2, womenMeans, width, yerr=womenStd, label='Women')

ax.axhline(0, color = 'gray', linewidth=0.8)
ax.set_ylabel('Scores')
ax.set_title('Scores by group and gender')
ax.legend()   # 범례.

plt.show()

plt.style.available

plt.style.use('Solarize_Light2')

titanic = sns.load_dataset('titanic')
titanic_age = titanic[['age', 'survived']].dropna()
print(titanic_age.head())
titanic_age.info()
print(titanic_age.age.max())

def age_band(num):
  for i in range(1, 10):
    if num < 10 * i:
      return f'under {i*10}'
titanic_age['age_band'] = titanic_age['age'].apply(age_band)
print(titanic_age.head())

titanic_age_band = titanic_age[['age_band', 'survived']].groupby('age_band'
                      )['survived'].value_counts().sort_index().unstack().fillna(0)
titanic_age_band['Survival rate'] = titanic_age_band[1] / (titanic_age_band[0] + titanic_age_band[1]) * 100
print(titanic_age_band)
print(type(titanic_age_band))

from matplotlib.ticker import FuncFormatter
fig, ax = plt.subplots(1, 2, figsize=(12, 5))

# bar_1
ax[0].bar(titanic_age_band.index, titanic_age_band['Survival rate'], color='gray')
ax[0].set_title('Age Band & Survival Rate(Before)')

# bar_2
with plt.xkcd(2):
  color_map = ['gray'] * 9
  color_map[0] = color_map[8] = '#3acea3'
  ax[1].bar(titanic_age_band.index, titanic_age_band['Survival rate'], color=color_map, edgecolor='black',
            linewidth=1.2, alpha=0.7)
  ax[1].set_title('Age Band & Survival Rate(After)', fontsize=15, fontweight='bold', position=(0.5, 1.0+0.1))
  ax[1].set_xticklabels(titanic_age_band.index, rotation=40, size=10)
  ax[1].yaxis.set_major_formatter(FuncFormatter(lambda y, _:f'{y:}%'))

  for i, rate in enumerate(titanic_age_band['Survival rate']):
      ax[1].annotate(f'{rate:.02f}%', xy=(i, rate + 2), va='center', ha='center', fontsize=10,
                    fontweight='bold', color='#383838')

plt.show()

titanic_embarked = titanic[['embarked', 'survived']].dropna()
titanic_embarked = titanic_embarked.groupby('embarked')['survived'].value_counts().sort_index()
type(titanic_embarked)
titanic_embarked

x_value = ['C-0', 'C-1', 'Q-0', 'Q-1', 'S-0', 'S-1']

fig, ax = plt.subplots(figsize=(8, 5))
ax.bar(x_value, list(titanic_embarked), color='#e0e0e0', width=0.52, edgecolor='black')
ax.set_xticklabels(['die', 'survived']*3)  # x축 레이블 수정
custom_color = ['g', 'b', 'orange']
span_range = [[0, 1], [2, 3], [4, 5]]
for idx, sub_title in enumerate(['Cherbourg', 'Queenstown', 'Southampton']):  # 지역명 수정
    ax.axvspan(span_range[idx][0]-0.4, span_range[idx][1]+0.4,
               color=custom_color[idx], alpha=0.07, hatch='///')
    ax.annotate(sub_title, xy=(sum(span_range[idx])/2, 350),
                xytext=(0, 0), textcoords='offset points',
                va='center', ha='center',
                color='w', fontsize=16, fontweight='bold',
                bbox=dict(boxstyle='round4', pad=0.4,
                          color=custom_color[idx], alpha=0.6))

plt.show()  # plt.show() 이동