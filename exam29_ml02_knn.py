# -*- coding: utf-8 -*-
"""exam29_ml02_knn.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NSrMxAE_8lZYly9TFgS1VFbIlHT7S00E
"""

import numpy as np
import pandas as pd
from sklearn.datasets import load_iris
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt

iris_dataset = load_iris()
iris = pd.DataFrame(iris_dataset.data, columns=iris_dataset.feature_names)
labels = iris_dataset.target_names
iris.info()
iris.head()

label = iris_dataset.target
label

scaler = StandardScaler()
iris = scaler.fit_transform(iris)

features = pd.DataFrame(iris, columns=['sl', 'sw', 'pl', 'pw'])
print(features.shape)
print(np.ndim(features))

x_train, x_test, y_train, y_test = train_test_split(features, label, test_size=0.2)
print(x_train.shape, x_test.shape)
print(y_train.shape, y_test.shape)

from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import cross_val_score

accuracy_rate = []
for i in range(1, 50):
    knn = KNeighborsClassifier(n_neighbors=i)
    score = cross_val_score(knn, features, label, cv=20)
    accuracy_rate.append(score.mean())

plt.figure(figsize=(10, 6))
plt.plot(range(1, 50), accuracy_rate, color='blue', linestyle='dashed', marker='o',
         markerfacecolor='red', markersize=10)
plt.title('Sccuracy Rate vs. K vValue')
plt.xlabel('K')
plt.ylabel('Accuracy Rate')
plt.show()

for i in range(100):
    x_train, x_test, y_train, y_test = train_test_split(features, label, test_size=0.2, random_state=i)
    iris_knn = KNeighborsClassifier(n_neighbors=14)
    iris_knn.fit(x_train, y_train)
    train_score = iris_knn.score(x_train, y_train)
    test_score = iris_knn.score(x_test, y_test)
    if test_score >= train_score:
        print('Test: {} Train: {} Random state: {}'.format(test_score, train_score, i))

x_train, x_test, y_train, y_test = train_test_split(features, label, test_size=0.2, random_state=40)
iris_knn = KNeighborsClassifier(n_neighbors=14)

x = np.array(x_train)[:, [2, 3]]
y = np.array(y_train)
iris_knn.fit(x, y)

from mlxtend.plotting import plot_decision_regions
fig = plot_decision_regions(x, y, clf=iris_knn, legend=2)
plt.show()

from sklearn.metrics import classification_report, confusion_matrix
iris_knn.fit(x_train, y_train)

pd.DataFrame(confusion_matrix(y_test, iris_knn.predict(x_test)),
            columns=['pred setosa', 'pred versicolore', 'pred virginica'],
            index=['actual setosa', 'actual versicolore', 'actual virginica'])

print(classification_report(y_test, iris_knn.predict(x_test)))

